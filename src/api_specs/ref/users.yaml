paths:
  users:
    post:
      tags:
        - users
      description: |
        create new user
      x-eov-operation-id: create
      x-eov-operation-handler: users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    get:
      tags:
        - users
      description: |
        user list
      x-eov-operation-id: list
      x-eov-operation-handler: users
      parameters:
        - $ref: './common.yaml#/components/parameters/limitQueryParams'
        - $ref: './common.yaml#/components/parameters/offsetQueryParams'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'

  user:
    get:
      tags:
        - users
      description: |
        get user info
      x-eov-operation-id: one
      x-eov-operation-handler: users
      parameters:
        - in: path
          name: user_id
          schema:
            type: number
          required: true
      responses:
        '200':
          description: OK
          content:
             application/json:
              schema:
                $ref: '#/components/schemas/User'

components:
  schemas:
    UserList:
      type: object
      properties:
        count:
          type: integer
          format: int32
        rows:
          type: array
          items:
            $ref: '#/components/schemas/User'
      required:
        - count
        - rows
      example:
        count: 2
        rows:
          - id: 1
            strategy_id: 'xxxxxxxxxx'
            status: 'valid'
            role_id: 'viewer'
            nickname: 'HOGE'
            profile_url: '/profile/images/1.png'
          - id: 2
            strategy_id: 'xxxxxxxxxx'
            status: 'valid'
            role_id: 'admin'
            nickname: 'SUPER_HOGE'
            profile_url: '/profile/images/1.png'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
          readOnly: true
        strategy_id:
          type: string
        status:
          type: string
          enum:
            - invalid
            - valid
        role_id:
          type: string
          enum:
            - viewer
            - admin
        nickname:
          type: string
        profile_url:
          type: string
      required:
        - strategy_id
        - status
        - role_id
        - nickname
      example:
        id: 1
        strategy_id: 'xxxxxxxxxx'
        status: 'valid'
        role_id: 'viewer'
        nickname: 'HOGE'
        profile_url: '/profile/images/1.png'